// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package UserDB

import (
	"context"
	"database/sql"
)

const addPassword = `-- name: AddPassword :exec
INSERT INTO passwords (UserId, Password)
VALUES
(?, ?)
`

type AddPasswordParams struct {
	Userid   sql.NullInt32
	Password string
}

func (q *Queries) AddPassword(ctx context.Context, arg AddPasswordParams) error {
	_, err := q.db.ExecContext(ctx, addPassword, arg.Userid, arg.Password)
	return err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, isAdmin)
VALUES
(?, ?)
`

type CreateUserParams struct {
	Username string
	Isadmin  interface{}
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Isadmin)
}

const getPassword = `-- name: GetPassword :one
SELECT userid, password FROM passwords WHERE UserId=?
`

func (q *Queries) GetPassword(ctx context.Context, userid sql.NullInt32) (Password, error) {
	row := q.db.QueryRowContext(ctx, getPassword, userid)
	var i Password
	err := row.Scan(&i.Userid, &i.Password)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, isadmin FROM users WHERE username=?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Isadmin)
	return i, err
}
